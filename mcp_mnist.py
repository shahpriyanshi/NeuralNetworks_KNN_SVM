# -*- coding: utf-8 -*-
"""MCP_mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DzQH8BFcmXKr2qaI0xwZhb9bwcTFVx1F

# **MLP** **Classifier**
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_auc_score, roc_curve, classification_report, confusion_matrix
from sklearn.svm import SVC
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import plot_confusion_matrix

from sklearn.datasets import fetch_openml

# Load data from https://www.openml.org/d/554
X, y = fetch_openml('mnist_784', version=1, return_X_y=True)

#normalizing the data
X = X / 255.

# (60K: Train) and (10K: Test)
X_train, X_test = X[:60000], X[60000:]
y_train, y_test = y[:60000], y[60000:]

import warnings
warnings.filterwarnings('ignore')

#hidden_layers
for h in [10, 50, 200]:
  #alpha
  for a in [1e-4, 1e-2]:
    #solver
    for o in ['sgd', 'adam', 'lbfgs']:
      #learning rate
      for lr in [0.1, 0.2, 0.001]:
        #activation
        for act in ['logistic', 'tanh', 'relu']:
          mlp = MLPClassifier(hidden_layer_sizes=h, max_iter=200, alpha=a, activation=act,
                              solver=o, verbose=0, random_state=1, learning_rate_init=lr)
          mlp.fit(X_train, y_train)
          y_pred = mlp.predict(X_test)
          train_acc = mlp.score(X_train, y_train)
          test_acc = mlp.score(X_test, y_test)

          print(f"Training Accuracy for Hidden Layers=:", h, ",..Alpha=", a, ",..Optimization=", o, ",..Learning Rate=", lr, ", and Activation=", act, "is...." , train_acc)
          print(f"Test Accuracy for Hidden Layers=:", h, ",..Alpha=", a, ",..Optimization=", o, ",..Learning Rate=", lr, ",..and Activation=", act, "is...." , test_acc) 
          print("Confusion Matrix\n", confusion_matrix(y_test, y_pred))
          print("Classification Report\n", classification_report(y_test, y_pred))

print(f"Training set score: {mlp.score(X_train, y_train):.3f}")
print(f"Test set score: {mlp.score(X_test, y_test):.3f}")

"""*   Hidden Layers = 10
*   Max Iterations = 100
*   Alpha = 1e-4
*   Learning Rate = 0.2
*   Random State = 2
*   Solver = SGD
"""

from sklearn.neural_network import MLPClassifier

mlp = MLPClassifier(hidden_layer_sizes=(10, ), max_iter=100, alpha=1e-4,
                    solver='sgd', verbose=10, random_state=2, learning_rate_init=0.2)
mlp.fit(X_train, y_train)

print(f"Training set score: {mlp.score(X_train, y_train):.3f}")
print(f"Test set score: {mlp.score(X_test, y_test):.3f}")

"""*   Hidden Layers = 10
*   Max Iterations = 100
*   Alpha = 1e-4
*   Learning Rate = 0.2
*   Random State = 1
*   Solver = SGD
"""

from sklearn.neural_network import MLPClassifier

mlp = MLPClassifier(hidden_layer_sizes=(10, ), max_iter=100, alpha=1e-4,
                    solver='sgd', verbose=10, random_state=1, learning_rate_init=0.2)
mlp.fit(X_train, y_train)

print(f"Training set score: {mlp.score(X_train, y_train):.3f}")
print(f"Test set score: {mlp.score(X_test, y_test):.3f}")

"""*   Hidden Layers = 10
*   Max Iterations = 100
*   Alpha = 1e-4
*   Learning Rate = 0.2
*   Random State = 42
*   Solver = SGD
"""

from sklearn.neural_network import MLPClassifier

mlp = MLPClassifier(hidden_layer_sizes=(10, ), max_iter=100, alpha=1e-4,
                    solver='sgd', verbose=10, random_state=42, learning_rate_init=0.2)
mlp.fit(X_train, y_train)

print(f"Training set score: {mlp.score(X_train, y_train):.3f}")
print(f"Test set score: {mlp.score(X_test, y_test):.3f}")



