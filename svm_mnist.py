# -*- coding: utf-8 -*-
"""SVM_mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qHjPiUd29zXz3zIzMm4AxYWxvnG6Dw3r
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_auc_score, roc_curve, classification_report, confusion_matrix
from sklearn.svm import SVC
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import fetch_openml

# Load data from https://www.openml.org/d/554
X, y = fetch_openml('mnist_784', version=1, return_X_y=True)

#normalizing the data
X = X / 255.

# (60K: Train) and (10K: Test)
X_train, X_test = X[:60000], X[60000:]
y_train, y_test = y[:60000], y[60000:]

from sklearn.metrics import classification_report, confusion_matrix
from sklearn.metrics import plot_confusion_matrix
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

for k in ['linear', 'poly', 'rbf', 'sigmoid']:
  for c in [1, 6, 16, 32]:
    model = SVC(kernel=k, C=c)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    test_accuracy = len([y_test[i] for i in range(0, len(y_test)) if y_test[i] == y_pred[i]]) / len(y_test)
    print("Testing Accuracy for kernel =", k, "and C =", c,"is ....", test_accuracy)
    test_error = 1-test_accuracy
    print("Testing Accuracy for kernel =", k, "and C =", c,"is ....", test_error)
    print("Confusion Matrix\n", confusion_matrix(y_test, y_pred))
    print("Classification Report", classification_report(y_test, y_pred))